length(nets1819)
sum(nchar(nets1819))
max(nchar(nets1819))
date_expression <- "[A-Z][a-z]{2},\\s[A-Z][a-z]{2}\\s[0-9]+"
datelines <- grep(date_expression,nets1819)
head(datelines)
date <- regmatches(nets1819,gregexpr(pattern = date_expression,nets1819))[[64]]
head(date)
time_expression <- "[0-9]:[0-9]{2}\\s[P][M]"
timelines <- grep(time_expression,nets1819)
head(timelines)
time <- regmatches(nets1819,gregexpr(pattern = time_expression,nets1819))[[65]]
head(time)
home_expression <- "(>@<|>vs<)"
#homelines <- grep(home_expression, nets1819[datelines])
#head(homelines)
homelines_loc <- gregexpr(home_expression, text=nets1819[datelines])
home <- regmatches(nets1819[datelines], homelines_loc)
home <- unlist(home)
home<- substr(home,start = 2,stop = nchar(home)-1)
home <- ifelse(home == "@",0,1)
head(home)
opponent_expression <- "title=\"([A-Z][a-z]+|[A-Z][a-z]+\ [A-Z]*[a-z]*|LA)\""
#opponentlines <- grep(opponent_expression, nets1819[datelines])
#head(opponentlines)
opponentlines_loc <- gregexpr(opponent_expression, text = nets1819[datelines])
opponent <- regmatches(nets1819[datelines],opponentlines_loc)
opponent <- unlist(opponent)
opponent <- substr(opponent,start = 8, stop = nchar(opponent)-1)
head(opponent)
opponent_expression <- "title=\"([A-Z][a-z]+|[A-Z][a-z]+\ [A-Z]*[a-z]*|LA)\""
opponentlines <- grep(opponent_expression, nets1819[datelines])
head(opponentlines)
opponentlines_loc <- gregexpr(opponent_expression, text = nets1819[datelines])
opponent <- regmatches(nets1819[datelines],opponentlines_loc)
opponent <- unlist(opponent)
opponent <- substr(opponent,start = 8, stop = nchar(opponent)-1)
head(opponent)
nets1819_dataframe <- data.frame(date=date,time=time,opponent=opponent,home=home)
head(nets1819_dataframe,10)
knitr::opts_chunk$set(echo = TRUE)
nets_game_schedule <- data.frame(date=unlist(date),time=unlist(time_vec),opponent=opponent,home=home)
nets1819_dataframe <- data.frame(date=date,time=time,opponent=opponent,home=home)
head(nets1819_dataframe,10)
opponent_expression <- "title=\"([A-Z][a-z]+|[A-Z][a-z]+\ [A-Z]*[a-z]*|LA)\""
#opponentlines <- grep(opponent_expression, nets1819[datelines])
#head(opponentlines)
opponentlines_loc <- gregexpr(opponent_expression, text = nets1819[datelines])
opponent <- regmatches(nets1819[datelines],opponentlines_loc)
opponent <- unlist(opponent)
opponent <- substr(opponent,start = 8, stop = nchar(opponent)-1)
head(opponent)
nets1819 <- readLines("http://www.espn.com/nba/team/schedule/_/name/BKN/seasontype/2",warn = FALSE)
head(nets1819)
nets1819 <- readLines("http://www.espn.com/nba/team/schedule/_/name/BKN/seasontype/2",warn = FALSE)
length(nets1819)
sum(nchar(nets1819))
max(nchar(nets1819))
date_expression <- "[A-Z][a-z]{2},\\s[A-Z][a-z]{2}\\s[0-9]+"
datelines <- grep(date_expression,nets1819)
head(datelines)
date <- regmatches(nets1819,gregexpr(pattern = date_expression,nets1819))[[64]]
head(date)
time_expression <- "[0-9]:[0-9]{2}\\s[P][M]"
timelines <- grep(time_expression,nets1819)
head(timelines)
time <- regmatches(nets1819,gregexpr(pattern = time_expression,nets1819))[[65]]
head(time)
home_expression <- "(>@<|>vs<)"
#homelines <- grep(home_expression, nets1819[datelines])
#head(homelines)
homelines_loc <- gregexpr(home_expression, text=nets1819[datelines])
home <- regmatches(nets1819[datelines], homelines_loc)
home <- unlist(home)
home<- substr(home,start = 2,stop = nchar(home)-1)
home <- ifelse(home == "@",0,1)
head(home)
opponent_expression <- "title=\"([A-Z][a-z]+|[A-Z][a-z]+\ [A-Z]*[a-z]*|LA)\""
#opponentlines <- grep(opponent_expression, nets1819[datelines])
#head(opponentlines)
opponentlines_loc <- gregexpr(opponent_expression, text = nets1819[datelines])
opponent <- regmatches(nets1819[datelines],opponentlines_loc)
opponent <- unlist(opponent)
opponent <- substr(opponent,start = 8, stop = nchar(opponent)-1)
head(opponent)
opponent_expression <- "title=\"([A-Z][a-z]+|[A-Z][a-z]+\ [A-Z]*[a-z]*|LA)\""
opponentlines <- grep(opponent_expression, nets1819[datelines])
head(opponentlines)
opponentlines_loc <- gregexpr(opponent_expression, text = nets1819[datelines])
opponent <- regmatches(nets1819[datelines],opponentlines_loc)
opponent <- unlist(opponent)
opponent <- substr(opponent,start = 8, stop = nchar(opponent)-1)
head(opponent)
nets1819_dataframe <- data.frame(date=date,time=time,opponent=opponent,home=home)
head(nets1819_dataframe,10)
knitr::opts_chunk$set(echo = TRUE)
nets1819 <- readLines("http://www.espn.com/nba/team/schedule/_/name/BKN/seasontype/2",warn = FALSE)
#ii.Part(a)
length(nets1819)
#Part(b)
nchar(nets1819)
#Part(c) by using max function of the list above
max(nchar(nets1819))
#iii. Date of the game
game_date <- "[A-Z]+[a-z]{2}\\,\\s+[A-Z]+[a-z]{2,8}\\s+[0-9]+[a-z]{2}\\s+[a-z]{2}\\s+[0-9]+\\:+[0-9]+\\s+[A-Z]+\\s+[A-Z]{2,}"
grep(nets1819, pattern = game_date)
regexpr(pattern = game_date, nets1819)
date1 <- regmatches(nets1819, gregexpr(pattern = game_date, nets1819))[65]
date <- strsplit(date1[[1]], split = "  ")
head(date,6)
#v.
time_pattern <- "[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[A-Z]+[0-9]{2}\\:[0-9]{2}"
grep(nets1819, pattern = time_pattern)
regexpr(pattern = time_pattern, nets1819)
time_vec1 <- regmatches(nets1819,gregexpr(pattern = time_pattern, nets1819))[65]
time_vec <- strsplit(time_vec1[[1]], split = " ")
time_vec <- unique(time_vec)
home_symbol <- "[[:punct:]]{2}(vs|@)"
homeornot <- regmatches(nets1819,gregexpr(pattern = home_symbol,nets1819))[65]
home_1 <-strsplit(homeornot[[1]], split = "[[:punct:]]{2}")
home_mat <- matrix(unlist(home_1), ncol = 2, byrow = TRUE)
home_2 <- home_mat[,2]
home <- ifelse(home_2=="vs",1,0)
opponent_symbol <- "displayName[[:punct:]]{1}[A-Za-z]+[[:space:]]?[A-Za-z]+[[:space:]]?[A-Za-z]+"
displayname <- "displayName[[:punct:]]{3}[A-Za-z][[:space:]]?[A-Za-z]+[[:space:]]?[A-Za-z]+"
mymatch2 <- regmatches(nets1819,gregexpr(pattern = displayname,nets1819))[65]
oppo_match <- mymatch2[[1]][(length(mymatch2[[1]])-length(time_vec)+1):length(mymatch2[[1]])]
oppo_split <- sapply(oppo_match, strsplit, split = "displayName[[:punct:]]{3}")
oppo_mat <- matrix(unlist(oppo_split), ncol = 2, byrow = TRUE)
opponent <- oppo_mat[,2]
nets_game_schedule <- data.frame(date=unlist(date),time=unlist(time_vec),opponent=opponent,home=home)
head(nets_game_schedule,10)
opponent_symbol <- "displayName[[:punct:]]{1}[A-Za-z]+[[:space:]]?[A-Za-z]+[[:space:]]?[A-Za-z]+"
displayname <- "displayName[[:punct:]]{3}[A-Za-z][[:space:]]?[A-Za-z]+[[:space:]]?[A-Za-z]+"
mymatch2 <- regmatches(nets1819,gregexpr(pattern = displayname,nets1819))[65]
oppo_match <- mymatch2[[1]][(length(mymatch2[[1]])-length(time_vec)+1):length(mymatch2[[1]])]
oppo_split <- sapply(oppo_match, strsplit, split = "displayName[[:punct:]]{3}")
oppo_mat <- matrix(unlist(oppo_split), ncol = 2, byrow = TRUE)
opponent <- oppo_mat[,2]
home_symbol <- "[[:punct:]]{2}(vs|@)"
homeornot <- regmatches(nets1819,gregexpr(pattern = home_symbol,nets1819))[65]
home_1 <-strsplit(homeornot[[1]], split = "[[:punct:]]{2}")
home_mat <- matrix(unlist(home_1), ncol = 2, byrow = TRUE)
home_2 <- home_mat[,2]
home <- ifelse(home_2=="vs",1,0)
install.packages("ISLR")
library(ISLR)
install.packages("ISLR")
library(ISLR)
head(ISLR)
install.packages("ISLR")
head(ISLR)
install.packages("installr")
library(installr)
updateR()
set.seed(1) # Please don't remove this code!
#install.packages("ISLR")
library(ISLR)
install.packages("ISLR")
library(ISLR)
install.packages("ISLR")
library(ISLR)
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
head(ISLR)
install.packages("ISLR")
library(ISLR)
install.packages("ISLR")
## Scatterplot Lag 1
plot(Weekly$Lag1,Weekly$Today,main="Returns",xlab="Two Weeks Ago",ylab="Today")
#install.packages("ISLR")
library(ISLR)
## Scatterplot Lag 1
plot(Weekly$Lag1,Weekly$Today,main="Returns",xlab="Two Weeks Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag1),col="red")
## Boxplot Lag 1
boxplot(Weekly$Lag1~Weekly$Direction,main="Returns",ylab="One Week Ago",xlab="Direction")
set.seed(1) # Please don't remove this code!
KNN.decision <- function(Lag1.new, Lag2.new, K = 5, Lag1 = Smarket$Lag1, Lag2 = Smarket$Lag2) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Smarket$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision <- function(newpoint, K = 5, Lag = data.frame('Lag1' = Weekly$Lag1, 'Lag2' = Weekly$Lag2,'Lag3' = Weekly$Lag3,'Lag4' = Weekly$Lag4,'Lag5' = Weekly$Lag5), Direction = Weekly$Direction) {
n <- nrow(Lag)
stopifnot(length(newpoint) == 5, ncol(Lag) == 5, K <= n)
dists       <- sqrt((Lag1-newpoint)^2 + (Lag2-newpoint)^2+(Lag3-newpoint)^2+(Lag4-newpoint)^2+(Lag5-newpoint)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision <- function(newpoint, K = 5, Lag = data.frame('Lag1' = Weekly$Lag1, 'Lag2' = Weekly$Lag2,'Lag3' = Weekly$Lag3,'Lag4' = Weekly$Lag4,'Lag5' = Weekly$Lag5), Direction = Weekly$Direction) {
n <- nrow(Lag)
stopifnot(length(newpoint) == 5, ncol(Lag) == 5, K <= n)
dists       <- sqrt((Lag1-newpoint)^2 + (Lag2-newpoint)^2+(Lag3-newpoint)^2+(Lag4-newpoint)^2+(Lag5-newpoint)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
Weekly
#install.packages("ISLR")
library(ISLR)
Weekly
#install.packages("ISLR")
library(ISLR)
head(Weekly)
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(test$Lag1[i],test$Lag2[i],test$Lag3[i],test$Lag4[i],test$Lag5[i],
Lag1 = train$Lag1,Lag2 = train$Lag2,Lag3 = train$Lag3,Lag4 = train$Lag4,train$Lag5, Direction = train$direction)
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test$Lag1[i],test$Lag2[i],test$Lag3[i],test$Lag4[i],test$Lag5[i]), Lag1 = train$Lag1,Lag2 = train$Lag2,Lag3 = train$Lag3,Lag4 = train$Lag4,train$Lag5, Direction = train$direction)
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric((test$Lag1[i],test$Lag2[i],test$Lag3[i],test$Lag4[i],test$Lag5[i])), Lag1 = train$Lag1,Lag2 = train$Lag2,Lag3 = train$Lag3,Lag4 = train$Lag4,train$Lag5, Direction = train$direction)
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test(i,2:6),Lag = train[,2:6]))
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6],Lag = train[,2:6]))
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6],Lag = train[,2:6]))
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6],Lag = train[,2:6]))
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6],Lag = train[,2:6]),Direction = Weekly$Direction)
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6],Lag = train[,2:6]),Direction = train$Direction)
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6],Lag = train[,2:6]),Direction = train$Direction)
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),Lag = train[,2:6],Direction = train$Direction)
}
KNN.decision <- function(newpoint, K = 5, Lag = Weekly[,2:6]), Direction = Weekly$Direction) {
KNN.decision <- function(newpoint, K = 5, Lag = Weekly[,2:6], Direction = Weekly$Direction) {
n <- nrow(Lag)
stopifnot(length(newpoint) == 5, ncol(Lag) == 5, K <= n)
dists       <- sqrt((Lag1-newpoint)^2 + (Lag2-newpoint)^2+(Lag3-newpoint)^2+(Lag4-newpoint)^2+(Lag5-newpoint)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),Lag = train[,2:6],Direction = train$Direction)
}
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),Lag = train[,2:6],Direction = train$Direction)
}
KNN.decision <- function(newpoint, K = 5, Lag = Weekly[,2:6], Direction = Weekly$Direction) {
n <- nrow(Lag)
stopifnot(length(newpoint) == 5, ncol(Lag) == 5, K <= n)
dists       <- sqrt((Lag1-newpoint)^2 + (Lag2-newpoint)^2+(Lag3-newpoint)^2+(Lag4-newpoint)^2+(Lag5-newpoint)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision(c(-0.5,0.5,-0.5,-0.5,0.5))
KNN.decision <- function(newpoint, K = 5, Lag = Weekly[,2:6], Direction = Weekly$Direction) {
n <- nrow(Lag)
stopifnot(length(newpoint) == 5, ncol(Lag) == 5, K <= n)
dists       <- sqrt(rowSums((Lag- rep(newpoint,each = n))^2))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision(c(-0.5,0.5,-0.5,-0.5,0.5))
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),Lag = train[,2:6],Direction = train$Direction)
}
test.error <- sum(prediction != test$Direction)/n.test
test.error
test <- Weekly[Weekly$Year >= 2009,]
train <- Weekly[Weekly$Year < 2009,]
n.test <- nrow(test)
prediction <- rep(NA, n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),K=7,Lag = train[,2:6],Direction = train$Direction)
}
test.error <- sum(prediction != test$Direction)/n.test
test.error
#install.packages("ISLR")
library(ISLR)
View(Weekly)
k <- 9
number <- rep(1:k, each = nrow(Weekly)/k)
fold <- sample(number)
fold.test.error <- rep(NA,k)
for(j in 1:k){
test <- Weekly[fold == j,]
train <- Weekly [fold != j,]
n.test <- nrow(test)
predictions <- rep(NA,n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),Lag = train[,2:6],Direction = train$Direction)
}
fold.test.error <- sum(prediction != test$Direction)/n.test
}
average.error <- mean(fold.test.error)
average.error
fold.test.error <- rep(NA,k)
for(j in 1:k){
test <- Weekly[fold == j,]
train <- Weekly [fold != j,]
n.test <- nrow(test)
predictions <- rep(NA,n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),Lag = train[,2:6],Direction = train$Direction)
}
fold.test.error[j] <- sum(prediction != test$Direction)/n.test
}
average.error <- mean(fold.test.error)
average.error
fold.test.error <- rep(NA,k)
for(j in 1:k){
test <- Weekly[fold == j,]
train <- Weekly [fold != j,]
n.test <- nrow(test)
predictions <- rep(NA,n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),K=1,Lag = train[,2:6],Direction = train$Direction)
}
fold.test.error[j] <- sum(prediction != test$Direction)/n.test
}
average.error <- mean(fold.test.error)
average.error
#k=3
fold.test.error <- rep(NA,k)
for(j in 1:k){
test <- Weekly[fold == j,]
train <- Weekly [fold != j,]
n.test <- nrow(test)
predictions <- rep(NA,n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),K=3,Lag = train[,2:6],Direction = train$Direction)
}
fold.test.error[j] <- sum(prediction != test$Direction)/n.test
}
average.error <- mean(fold.test.error)
average.error
#k=7
fold.test.error <- rep(NA,k)
for(j in 1:k){
test <- Weekly[fold == j,]
train <- Weekly [fold != j,]
n.test <- nrow(test)
predictions <- rep(NA,n.test)
for (i in 1:n.test){
prediction[i] <- KNN.decision(as.numeric(test[i,2:6]),K=7,Lag = train[,2:6],Direction = train$Direction)
}
fold.test.error[j] <- sum(prediction != test$Direction)/n.test
}
average.error <- mean(fold.test.error)
average.error
data1 <- read.table("CosmeticsSales.txt",header = T)
summary(lm(Sales~Expenditures,data=data1))
data <- read.table("HW3Problem3.txt",header = T)
model <- lm(RentalRates~OperatingExpense+VacancyRates+SquareFootage+Age,data = data)
anova(model)
data1 <- read.table("CosmeticsSales.txt",header = T)
summary(lm(Sales~Expenditures,data=data1))
data1 <- read.table("CosmeticsSales.txt",header = T)
summary(lm(Sales~Expenditures,data=data1))
summary(lm(Sales~LocalExpenditures,data=data1))
summary(lm(Sales~Expenditures+LocalExpenditures+ProratedShare,data=data1))
summary(lm(Sales~Expenditures+LocalExpenditures+ProratedShare,data=data1))
plot(data1$Expenditures,data1$LocalExpenditures, main="Scatterplot Expenditures vs LocalExpenditures",
xlab="Expenditures", ylab="local expenditure", pch=19)
pairs(~Sales+Expenditures+LocalExpenditures+ProratedShare,data=data1,
main="Simple Scatterplot Matrix")
?mean
data <- c(143，164，188，188，190，192，206，209，213，216，220，227，230，234，246，265，304)
data<- c(143，164，188，188，190，192，206，209，213，216，220，227，230，234，246，265，304)
data<- c(143,164，188，188，190，192，206，209，213，216，220，227，230，234，246，265，304)
data<- c(143,164,188,188,190,192,206,209,213,216,220,227,230,234,246,265,204)
sort.data <- sort(data)
s-bar <- 1-(1:17-0.5)/length(data)
data<- c(143,164,188,188,190,192,206,209,213,216,220,227,230,234,246,265,204)
sort.data <- sort(data)
sbar <- 1-(1:17-0.5)/length(data)
plot(data,s-bar,type = "s",xlab = "Survival")
data<- c(143,164,188,188,190,192,206,209,213,216,220,227,230,234,246,265,204)
sort.data <- sort(data)
sbar <- 1-(1:17-0.5)/length(data)
plot(data,sbar,type = "s",xlab = "Survival")
data<- c(143,164,188,188,190,192,206,209,213,216,220,227,230,234,246,265,304)
sort.data <- sort(data)
sbar <- 1-(1:17-0.5)/length(data)
plot(data,sbar,type = "s",xlab = "Survival")
data<- c(143,164,188,188,190,192,206,209,213,216,220,227,230,234,246,265,304)
sort.data <- sort(data)
sbar <- 1-(1:17-0.5)/length(data)
plot(data,sbar,type = "Time",xlab = "Survival")
data<- c(143,164,188,188,190,192,206,209,213,216,220,227,230,234,246,265,304)
sort.data <- sort(data)
sbar <- 1-(1:17-0.5)/length(data)
plot(data,sbar,type = "s",xlab = "Time",ylab = "Survival")
group1 = c(1.25, 1.41, 4.98, 5.25, 5.38, 6.92, 8.89, 10.98, 11.18, 13.11, 13.21, 16.33, 19.77, 21.08, 21.84, 22.07, 31.38, 32.61, 37.18, 42.92)
group2 = c(1.05, 2.92, 3.61, 4.20, 4.49, 6.72, 7.31, 9.08, 9.11, 14.49, 16.85, 18.82, 26.59, 30.26, 41.34)
time <- c(group1,group2)
status <- c(rep(1,14),0,1,0,0,0,1,rep(1,9),0,1,0,0,0,0)
group <- c(rep(1,20),rep(2,15)) library(survival) fit<-survfit(Surv(time,status)~group) plot(fit,lty=1:2)
group1 = c(1.25, 1.41, 4.98, 5.25, 5.38, 6.92, 8.89, 10.98, 11.18, 13.11, 13.21, 16.33, 19.77, 21.08, 21.84, 22.07, 31.38, 32.61, 37.18, 42.92)
group2 = c(1.05, 2.92, 3.61, 4.20, 4.49, 6.72, 7.31, 9.08, 9.11, 14.49, 16.85, 18.82, 26.59, 30.26, 41.34)
time <- c(group1,group2)
status <- c(rep(1,14),0,1,0,0,0,1,rep(1,9),0,1,0,0,0,0)
group <- c(rep(1,20),rep(2,15))
library(survival)
fit<-survfit(Surv(time,status)~group)
plot(fit,lty=1:2)
SA <- fit$surv[1:20]
SB <- fit$surv[21:35]
summary(survfit(Surv(time,status)~group,type="kaplan-meier",conf.type="log"),times = 10)
SA <- fit$surv[1:20]
SA
SB <- fit$surv[21:35]
SB
y <- log(-log(sbar))
x <- log(data)
lm(y~x)
exp(-5.432302)
index <- -37.233/6.854
index
library(survival)
group1 = c(1.25, 1.41, 4.98, 5.25, 5.38, 6.92, 8.89, 10.98, 11.18, 13.11, 13.21, 16.33, 19.77, 21.08, 21.84, 22.07, 31.38, 32.61, 37.18, 42.92)
group2 = c(1.05, 2.92, 3.61, 4.20, 4.49, 6.72, 7.31, 9.08, 9.11, 14.49, 16.85, 18.82, 26.59, 30.26, 41.34)
time <- c(group1,group2)
status <- c(rep(1,14),0,1,0,0,0,1,rep(1,9),0,1,0,0,0,0)
group <- c(rep(1,20),rep(2,15))
fit<-survfit(Surv(time,status)~group)
plot(fit,col=c("green","red"))
fit$surv[1:20]
fit$surv[21:35]
setwd("~/Desktop/5243/Project1/Spring2020-Project1-suziechen2018/data")
library(reticulate)
install.packages("reticulate")
library(reticulate)
library(reticulate)
library(reticulate)
library(reticulate)
install.packages("reticulate")
